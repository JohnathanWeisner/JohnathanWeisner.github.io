<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Boggle | Rubyland]]></title>
  <link href="http://johnathanweisner.github.io/blog/categories/boggle/atom.xml" rel="self"/>
  <link href="http://johnathanweisner.github.io/"/>
  <updated>2015-01-20T16:47:09-05:00</updated>
  <id>http://johnathanweisner.github.io/</id>
  <author>
    <name><![CDATA[Johnathan Weisner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backtracking]]></title>
    <link href="http://johnathanweisner.github.io/blog/2015/01/20/backtracking/"/>
    <updated>2015-01-20T10:32:26-05:00</updated>
    <id>http://johnathanweisner.github.io/blog/2015/01/20/backtracking</id>
    <content type="html"><![CDATA[<h3>An algorithm?</h3>

<p>The backtracking algorithm is actually a metaheuristic. It&rsquo;s an overarching idea that can be applied to many problems. The backtracking algorithm uses tree recursion to search for a valid complete solution.</p>

<h3>What problems can be solved using the backtracking algorithm?</h3>

<p>If a problem can be shown as valid in a partial form with a set amount of possiblilities for a given step then it can most likely be solved with the backtracking algorithm.</p>

<h3>Can you show me the basic steps involved with the backtracking algorithm?</h3>

<p>Sure!</p>

<p><strong>1. Iterate through all of the starting positions calling solve on each.</strong><br/>
<strong>2. Within solve check to see if the solution is complete and return the solution if it is.(The base case.)</strong><br/>
<strong>3. Try the first(or next) possibility in the set of possibilities.</strong><br/>
<strong>4. Check to see if partial solution is still valid.</strong><br/>
<strong>5. If the partial solution is invalid then try the next possibility until you run out of possibilities or you find a valid partial solution.</strong><br/>
<strong>6. If the partial solution is valid then call this solve again starting at step one.</strong><br/>
<strong>7. If there are no valid possibilities then undo possibilty you tried and return false.</strong></p>

<h3>Show me an example!</h3>

<p>Lets start with the simple example of Boggle.</p>

<p>A boggle board is a 4x4 grid with single letters in each cell (except qu which come together).</p>

<p>First we need to define the problem that needs solving.<br/>
We need to find out whether a word is present on the boggle board.</p>

<p>To do that we search for the first letter of our word. If that letter is present on the board then look all around that first letter for the second letter. If we find the second letter then we search all around the second letter for the third letter without looking at the previously found letters. If by using this method we find all the letters of our word this way then we know the word is on the board.</p>

<p>If we don&rsquo;t find all the letters of the word this way then it&rsquo;s not present.     Simple, right?</p>

<p>Lets say we have the board below and we&rsquo;re looking for the word BOB.</p>

<pre><code> A  B  C  D
 E  C  O  H
 B  O  K  L
 B  N  O  P
</code></pre>

<p>On the top row there is a &lsquo;B&rsquo; in the second cell of the first row. Lets search around that letter for the next letter &lsquo;O&rsquo;.</p>

<p>Yay! We found it.<br/>
Cool, now lets look around the &lsquo;O&rsquo; for another &lsquo;B&rsquo;.<br/>
Damn, we only found the first &lsquo;B&rsquo; again.</p>

<p>No good. <br/>
Lets continue looking around the first &lsquo;B&rsquo; for another &lsquo;O&rsquo;.</p>

<p>Nope, no luck!<br/>
Okay, lets go back and start looking for the first letter again.<br/>
Oh look at there is a &lsquo;B&rsquo; at the first cell on row 3.</p>

<p>Sweet.<br/>
Lets look around the &lsquo;B&rsquo; for the next letter &lsquo;O&rsquo;.</p>

<p>There it is right next to it!<br/>
Great now look around the &lsquo;O&rsquo; for a different &lsquo;B&rsquo; then we already found.</p>

<p>Awesome, we found it on row 4 cell 1!<br/>
BOB is present on that boggle board so we return true.<br/>
If we couldn&rsquo;t find BOB with this method then we would return false.</p>

<p>We used a backtracking algorithm in our minds when we went through that last problem. Lets go over the steps I mentioned make up the backtracking algorithm and apply them to this problem.</p>

<p><strong>1. Iterate through all of the starting positions calling solve on each.</strong><br/>
Step through all of the letters on the board. If we find the first letter of the board then continue to step 2.</p>

<p><strong>2. Within solve check to see if the solution is complete and return the solution if it is.(The base case.)</strong><br/>
If there are no more letters in our word remaining to check for return true.</p>

<p><strong>3. Try the first(or next) possibility in the set of possibilities.</strong><br/>
The set of possibilities are all of the letters surrounding the last letter we found. Try the first one.</p>

<p><strong>4. Check to see if partial solution is still valid.</strong><br/>
The partial solution is valid if this letter is the next letter in the word and the cell hasn&rsquo;t been used for previous letters of the word.</p>

<p><strong>5. If the partial solution is invalid then try the next possibility until you run out of possibilities or you find a valid partial solution.</strong><br/>
Look at each of these letters in order and see if they match the letter for which we are looking.</p>

<p><strong>6. If the partial solution is valid then call this solve again starting at step one.</strong><br/>
If we find the letter we are looking for and it hasn&rsquo;t been used yet then go back to step one and start looking for the next letter in the word.</p>

<p><strong>7. If there are no valid possibilities then undo possibilty you tried and return false.</strong><br/>
If we try all of the possible letters around a letter and none of them are right return false.</p>

<h3>Lets take a look at the code this would translate into.</h3>

<pre><code class="ruby">class BoggleSolver

  def initialize board_string
    @board = board_string.chars.each_slice(4).map{ |row| row }
    @radial_offset_coords = [
      [-1,-1],[-1, 0],[-1, 1],
      [ 0,-1],        [ 0, 1],
      [ 1,-1],[ 1, 0],[ 1, 1]
    ]
  end

  def radial_search word, coords_used
    return true if word.empty?
    next_letter = word[0]
    row, col = coords_used.last

    @radial_offset_coords.each do |row_offset, col_offset|
      try_row, try_col = row + row_offset, col + col_offset
      next unless inbounds? try_row, try_col

      if valid_next_letter? try_row, try_col, next_letter, coords_used
        return true if radial_search(word[1..-1], coords_used &lt;&lt; [try_row, try_col])
      end
    end
    false
  end

  def inbounds? row, col
    row &gt;= 0 &amp;&amp; row &lt;= 3 &amp;&amp; col &gt;= 0 &amp;&amp; col &lt;= 3
  end

  def valid_next_letter? row, col, letter, coords_used
    @board[row][col] == letter &amp;&amp; !coords_used.include?([row, col])
  end

  def solve word
    4.times do |row|
      4.times do |col|
        return true if radial_search word, [[row, col]]
      end
    end
    false
  end
end

board = "ABCDECOHBOKLBNOE"
board2 = "XXXAXPPXLXXXXEXX"
solver = BoggleSolver.new(board)
solver2 = BoggleSolver.new(board2)

p solver.solve("BOB") == true
p solver.solve("AECOK") ==  true
p solver.solve("COHP") == false
p solver2.solve("APPLE") == true
p solver2.solve("APPLEE") == false
</code></pre>
]]></content>
  </entry>
  
</feed>
