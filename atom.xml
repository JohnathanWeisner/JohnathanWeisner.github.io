<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rubyland]]></title>
  <link href="http://johnathanweisner.github.io/atom.xml" rel="self"/>
  <link href="http://johnathanweisner.github.io/"/>
  <updated>2015-01-20T16:26:26-05:00</updated>
  <id>http://johnathanweisner.github.io/</id>
  <author>
    <name><![CDATA[Johnathan Weisner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backtracking]]></title>
    <link href="http://johnathanweisner.github.io/blog/2015/01/20/backtracking/"/>
    <updated>2015-01-20T10:32:26-05:00</updated>
    <id>http://johnathanweisner.github.io/blog/2015/01/20/backtracking</id>
    <content type="html"><![CDATA[<h3>An algorithm?</h3>

<p>The backtracking algorithm is actually a metaheuristic. It&rsquo;s an overarching idea that can be applied to many problems. The backtracking algorithm uses tree recursion to search for a valid complete solution.</p>

<h3>What problems can be solved using the backtracking algorithm?</h3>

<p>If a problem can be shown as valid in a partial form with a set amount of possiblilities for a given step then it can most likely be solved with the backtracking algorithm.</p>

<h3>Can you show me the basic steps involved with the backtracking algorithm?</h3>

<p>Sure!
<em>1. Check to see if the solution is complete and return the solution if it is.(The base case.)</em>
<em>2. Start at the first starting position.(If solve is called again find the next starting position.)</em>
<em>3. Try the first(or next) possibility in the set of possibilities.</em>
<em>4. Check to see if partial solution is still valid.</em>
<em>5. If the partial solution is invalid then try the next possibility until you run out of possibilities or you find a valid partial solution.</em>
<em>6. If the partial solution is valid then call this solve again starting at step one.</em>
<em>7. If there are no valid possibilities then undo possibilty you tried and return false.</em></p>

<h3>Show me an example!</h3>

<p>Lets start with the simple example of Boggle.
A boggle board is a 4x4 grid with single letters in each cell (except qu which come together).
First we need to define the problem that needs solving.
We need to find out whether a word is present on the boggle board.
To do that we search for the first letter of our word. If that letter is present on the board then look all around that first letter for the second letter. If we find the second letter then we search all around the second letter for the third letter without looking at the previously found letters. If by using this method we find all the letters of our word this way then we know the word is on the board.</p>

<p>If we don&rsquo;t find all the letters of the word this way then it&rsquo;s not present. Simple, right?</p>

<p>Lets say we have the board below and we&rsquo;re looking for the word BOB.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'> A | B | C | D
</span><span class='line'>---------------
</span><span class='line'> E | C | O | H
</span><span class='line'>---------------
</span><span class='line'> B | O | K | L
</span><span class='line'>---------------
</span><span class='line'> B | N | O | P
</span></code></pre></td></tr></table></div></figure>


<p>On the top row there is a &lsquo;B&rsquo; in the second cell of the first row. Lets search around that letter for the next letter &lsquo;O&rsquo;.</p>

<p>Yay! We found it.</p>

<p>Cool, now lets look around the &lsquo;O&rsquo; for another &lsquo;B&rsquo;.</p>

<p>Damn, we only found the first &lsquo;B&rsquo; again.</p>

<p>No good.</p>

<p>Lets continue looking around the first &lsquo;B&rsquo; for another &lsquo;O&rsquo;.</p>

<p>Nope, no luck!</p>

<p>Okay, lets go back and start looking for the first letter again.</p>

<p>Oh look at there is a &lsquo;B&rsquo; at the first cell on row 3.</p>

<p>Sweet.</p>

<p>Lets look around the &lsquo;B&rsquo; for the next letter &lsquo;O&rsquo;.</p>

<p>There it is right next to it!</p>

<p>Great now look around the &lsquo;O&rsquo; for a different &lsquo;B&rsquo; then we already found.</p>

<p>Awesome, we found it on row 4 cell 1!</p>

<p>BOB is present on that boggle board so we return true.</p>

<p>If we couldn&rsquo;t find BOB with this method then we would return false.</p>

<p>We used a backtracking algorithm in our minds to when we went through that last problem. Lets go over the steps I mentioned make up the backtracking algorithm and apply them to this problem.</p>

<p><em>1. Check to see if the solution is complete and return the solution if it is.(The base case.)</em>
If there are no more letters in our word left to check for return true.</p>

<p><em>2. Start at the first starting position.(If solve is called again find the next starting position.)</em>
Step through all of the letters on the board. If we find the first letter of the board then continue to step 3.</p>

<p><em>3. Try the first(or next) possibility in the set of possibilities.</em>
The set of possibilities are all of the letters surrounding the last letter we found. Try the first one.</p>

<p><em>4. Check to see if partial solution is still valid.</em>
The partial solution is valid if this letter is the next letter in the word and the cell hasn&rsquo;t been used for previous letters of the word.</p>

<p><em>5. If the partial solution is invalid then try the next possibility until you run out of possibilities or you find a valid partial solution.</em>
Look at each of these letters in order and see if they match the letter for which we are looking.</p>

<p><em>6. If the partial solution is valid then call this solve again starting at step one.</em></p>

<p>If we find the letter we are looking for and it hasn&rsquo;t been used yet then go back to step one and start looking for the next letter in the word.</p>

<p><em>7. If there are no valid possibilities then undo possibilty you tried and return false.</em></p>

<p>If we try all of the possible letters around a letter and none of them are right return false.</p>

<h3>Lets take a look at the code this would translate into.</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BoggleSolver</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span> <span class="n">board_string</span>
</span><span class='line'>    <span class="vi">@board</span> <span class="o">=</span> <span class="n">board_string</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">each_slice</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="n">row</span> <span class="p">}</span>
</span><span class='line'>    <span class="vi">@radial_offset_coords</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>      <span class="o">[-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="o">[</span> <span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span>        <span class="o">[</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="o">[</span> <span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="o">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="o">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">radial_search</span> <span class="n">word</span><span class="p">,</span> <span class="n">coords_used</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">word</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">next_letter</span> <span class="o">=</span> <span class="n">word</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="n">row</span><span class="p">,</span> <span class="n">col</span> <span class="o">=</span> <span class="n">coords_used</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@radial_offset_coords</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row_offset</span><span class="p">,</span> <span class="n">col_offset</span><span class="o">|</span>
</span><span class='line'>      <span class="n">try_row</span><span class="p">,</span> <span class="n">try_col</span> <span class="o">=</span> <span class="n">row</span> <span class="o">+</span> <span class="n">row_offset</span><span class="p">,</span> <span class="n">col</span> <span class="o">+</span> <span class="n">col_offset</span>
</span><span class='line'>      <span class="k">next</span> <span class="k">unless</span> <span class="n">inbounds?</span> <span class="n">try_row</span><span class="p">,</span> <span class="n">try_col</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">valid_next_letter?</span> <span class="n">try_row</span><span class="p">,</span> <span class="n">try_col</span><span class="p">,</span> <span class="n">next_letter</span><span class="p">,</span> <span class="n">coords_used</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">radial_search</span><span class="p">(</span><span class="n">word</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">coords_used</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">try_row</span><span class="p">,</span> <span class="n">try_col</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">inbounds?</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span>
</span><span class='line'>    <span class="n">row</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">row</span> <span class="o">&lt;=</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="n">col</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">col</span> <span class="o">&lt;=</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid_next_letter?</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">,</span> <span class="n">letter</span><span class="p">,</span> <span class="n">coords_used</span>
</span><span class='line'>    <span class="vi">@board</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">==</span> <span class="n">letter</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">coords_used</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="o">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">solve</span> <span class="n">word</span>
</span><span class='line'>    <span class="mi">4</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>      <span class="mi">4</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">col</span><span class="o">|</span>
</span><span class='line'>        <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">radial_search</span> <span class="n">word</span><span class="p">,</span> <span class="o">[[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="o">]]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">board</span> <span class="o">=</span> <span class="s2">&quot;ABCDECOHBOKLBNOE&quot;</span>
</span><span class='line'><span class="n">board2</span> <span class="o">=</span> <span class="s2">&quot;XXXAXPPXLXXXXEXX&quot;</span>
</span><span class='line'><span class="n">solver</span> <span class="o">=</span> <span class="no">BoggleSolver</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
</span><span class='line'><span class="n">solver2</span> <span class="o">=</span> <span class="no">BoggleSolver</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">board2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">solver</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="s2">&quot;BOB&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'><span class="nb">p</span> <span class="n">solver</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="s2">&quot;AECOK&quot;</span><span class="p">)</span> <span class="o">==</span>  <span class="kp">true</span>
</span><span class='line'><span class="nb">p</span> <span class="n">solver</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="s2">&quot;COHP&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="kp">false</span>
</span><span class='line'><span class="nb">p</span> <span class="n">solver2</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="s2">&quot;APPLE&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'><span class="nb">p</span> <span class="n">solver2</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="s2">&quot;APPLEE&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cards Could Be the Future]]></title>
    <link href="http://johnathanweisner.github.io/blog/2014/07/02/cards-could-be-the-future/"/>
    <updated>2014-07-02T13:24:48-04:00</updated>
    <id>http://johnathanweisner.github.io/blog/2014/07/02/cards-could-be-the-future</id>
    <content type="html"><![CDATA[<p>Christopher Tse gave a great talk about the technical aspects involved with creating app-like websites &lsquo;Cards&rsquo;.</p>

<p>He explained Google and Apple&rsquo;s closed ecosystems are in the innovative lead right now with the web&rsquo;s open ecosystem in a strong third place. Chris Tse wants to see a future where the web can stay relevant.</p>

<p>To do that he proposes turning all major websites into JavaScript app sites which he references as &lsquo;Cards&rsquo;. That way the cards can be embedded in a browser app-store ecosystem and he went over all of the technical aspects for standardizing this future.</p>

<p>Here are my notes from the event:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>What are cards?
</span><span class='line'>  Responsive.
</span><span class='line'>  Power: What is the gist? Displays it.
</span><span class='line'>  They're in containers:
</span><span class='line'>    Structure
</span><span class='line'>      Feed
</span><span class='line'>      Stack
</span><span class='line'>      Board
</span><span class='line'>      Collage
</span><span class='line'>
</span><span class='line'>    An atomic unit for building apps.
</span><span class='line'>    The function is built in.
</span><span class='line'>
</span><span class='line'>    Easier navigation
</span><span class='line'>
</span><span class='line'>    (corrilation 100 million users+ uses cards)
</span><span class='line'>    OSX Widgets
</span><span class='line'>    Windows 8
</span><span class='line'>
</span><span class='line'>LEVELS of Card-dom
</span><span class='line'>  1. Visualize
</span><span class='line'>    Looks like a card.
</span><span class='line'>  2. Modularize
</span><span class='line'>    I, the good developer, am reusing this card as a component in my app.
</span><span class='line'>  3. Synthesize
</span><span class='line'>    My app supports multiple types of cards for user to create, edit, or trigger actions
</span><span class='line'>  4. Externalize
</span><span class='line'>    The user or the sustem can turn a piece of my app into a card or widget embed it in another appl
</span><span class='line'>  5. Organize
</span><span class='line'>    The user, not you the developer, can mix and match cards from different vendors, chain, them together, to fit their workflow.
</span><span class='line'>
</span><span class='line'>How to build them?
</span><span class='line'>  Famo.us
</span><span class='line'>  Google's material design
</span><span class='line'>    Weight - Texture - Shadow
</span><span class='line'>  Polymer by Google
</span><span class='line'>    DOM - SHADOW DOM (sandbox)
</span><span class='line'>      Multiple Shadow DOMs
</span><span class='line'>    Leaks:
</span><span class='line'>      CSS
</span><span class='line'>      Javascript
</span><span class='line'>    Seamless Sandbox IFrame HTML5 SPEC
</span><span class='line'>      You get:
</span><span class='line'>        Your own real DOM
</span><span class='line'>        Any JS Libraries
</span><span class='line'>        Piece of Mind
</span><span class='line'>          Oasis.js as Polyfill
</span><span class='line'>            Uses the concepts of in capability-based security to help you safely expose capabilities and data to untrusted code, secure in the knowledge
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Why is this important?
</span><span class='line'>
</span><span class='line'>www.polymer-project.org
</span><span class='line'>github.com/yapplabs/glazier</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initializing a New Rails 4 App]]></title>
    <link href="http://johnathanweisner.github.io/blog/2014/06/01/initializing-a-new-rails-4-app/"/>
    <updated>2014-06-01T14:57:56-04:00</updated>
    <id>http://johnathanweisner.github.io/blog/2014/06/01/initializing-a-new-rails-4-app</id>
    <content type="html"><![CDATA[<h1>Rails 4 with RSPEC and Jasmine testing</h1>

<p>If you&rsquo;re looking for a quick guide to initialize a Rails 4 app with rspec and jasmine testing then this is the place for you. I won&rsquo;t go into full detail on how to use each testing platform or much else besides what each command does. With out further ado, here we go!</p>

<h3>New Rails App</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new YOUR-APP-NAME-HERE -T -d postgresql</span></code></pre></td></tr></table></div></figure>


<h4>-T is included to tell rails to exclude minitest so that we can add rspec later.</h4>

<h4>-d is there so the default sqlite3 is left out. We will be using postgresql.</h4>

<h4>postgresql lets rails know to include the pg gem in the gemfile and initialize the config/database.yml file for you.</h4>

<h3>Bundle</h3>

<p>Change directory into your app and type</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle</span></code></pre></td></tr></table></div></figure>


<p>to install your gems</p>

<h3>Generate your install files for RSPEC and Jasmine</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails generate rspec:install</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails generate jasmine_rails:install</span></code></pre></td></tr></table></div></figure>


<p>Now you&rsquo;re all set to start your TDD process!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binary Search in Ruby]]></title>
    <link href="http://johnathanweisner.github.io/blog/2014/05/18/binary-search-in-ruby/"/>
    <updated>2014-05-18T22:23:05-04:00</updated>
    <id>http://johnathanweisner.github.io/blog/2014/05/18/binary-search-in-ruby</id>
    <content type="html"><![CDATA[<p>The concept of binary search is rather simple.</p>

<h3>Divide and conquer</h3>

<h5><em>(as long as the conquered is already sorted.)</em></h5>

<p>During the Phase 0 at Dev Bootcamp we were given an assignment to write a binary search method that returns the index of an object with a specified SSN property. You could choose to write your method as a loop or recursively. To gain more recursive practice I chose that route, because who doesn’t need more practice writing recursive methods? I knew writing the code as a recursive method would be a little bit of a performance loss, but I didn’t know how much.</p>

<h3>What is a student to do? <strong>Benchmark</strong>!</h3>

<h6>(The built in ruby bsearch method is twice as fast as the while loop implimentation used in the code below, but there was no efficient way I could find that would allow me to return the index of the found element that was searched for.)</h6>

<p>The benchmark is set to run 4 different methods.</p>

<p>The first method is a pretty version of binary search I found online that I didn’t think would work all that well because it makes a new array every time it’s run defeating the purpose of Bsearch all together. But I still wanted to see how much of a performance loss that would be.</p>

<p>The second method is the recursive Bsearch method I made.</p>

<p>The third method is a while loop implementation of Bsearch made by Kenneth Uy from my cohort at DBC.</p>

<p>The forth method is a control array.index(num) call which I believe works with linear search.</p>

<p><em>With out further ado, here is the benchmark followed by the code:</em></p>

<figure class='code'><figcaption><span>Ruby Binary Search Benchmarks</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>             <span class="n">real</span> <span class="n">seconds</span>
</span><span class='line'><span class="no">Bsearch</span> <span class="ss">Pretty</span><span class="p">:</span>      <span class="mi">4</span><span class="o">.</span><span class="mi">764159</span>
</span><span class='line'><span class="no">Bsearch</span> <span class="ss">Recursive</span><span class="p">:</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">02403</span><span class="mi">9</span>
</span><span class='line'><span class="no">Bsearch</span> <span class="no">While</span> <span class="ss">Loop</span><span class="p">:</span>  <span class="mi">0</span><span class="o">.</span><span class="mo">00</span><span class="mi">8000</span>
</span><span class='line'><span class="no">Using</span> <span class="o">.</span><span class="n">index</span><span class="p">:</span>        <span class="mi">1</span><span class="o">.</span><span class="mi">868240</span>
</span><span class='line'><span class="no">Bsearch</span> <span class="ss">Pretty</span><span class="p">:</span>      <span class="mi">5</span><span class="o">.</span><span class="mo">071377</span>
</span><span class='line'><span class="no">Bsearch</span> <span class="no">Recursive</span>    <span class="mi">0</span><span class="o">.</span><span class="mo">017012</span>
</span><span class='line'><span class="no">Bsearch</span> <span class="no">While</span> <span class="ss">Loop</span><span class="p">:</span>  <span class="mi">0</span><span class="o">.</span><span class="mo">006004</span>
</span><span class='line'><span class="no">Using</span> <span class="o">.</span><span class="n">index</span><span class="p">:</span>        <span class="mi">0</span><span class="o">.</span><span class="mo">07104</span><span class="mi">8</span>
</span><span class='line'><span class="no">Bsearch</span> <span class="ss">Pretty</span><span class="p">:</span>      <span class="mi">3</span><span class="o">.</span><span class="mi">774646</span>
</span><span class='line'><span class="no">Bsearch</span> <span class="no">Recursive</span>    <span class="mi">0</span><span class="o">.</span><span class="mo">01</span><span class="mi">8012</span>
</span><span class='line'><span class="no">Bsearch</span> <span class="no">While</span> <span class="ss">Loop</span><span class="p">:</span>  <span class="mi">0</span><span class="o">.</span><span class="mo">006004</span>
</span><span class='line'><span class="no">Using</span> <span class="o">.</span><span class="n">index</span><span class="p">:</span>        <span class="mi">0</span><span class="o">.</span><span class="mi">175116</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">10000</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="n">num</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bsearch</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">each_with_index</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">bsearch</span> <span class="p">{</span> <span class="o">|</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">index</span><span class="p">)</span><span class="o">|</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="n">num</span> <span class="p">}</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bsearch2</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mid</span> <span class="o">=</span> <span class="n">get_mid</span><span class="p">(</span><span class="n">min</span><span class="p">,</span> <span class="n">max</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mid</span> <span class="k">if</span> <span class="n">array</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">==</span> <span class="n">num</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">max</span> <span class="o">&lt;=</span> <span class="n">min</span> <span class="o">||</span> <span class="n">mid</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">array</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">num</span> <span class="p">?</span> <span class="n">bsearch2</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">max</span><span class="p">)</span> <span class="p">:</span> <span class="n">bsearch2</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="n">min</span><span class="p">,</span> <span class="n">mid</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_mid</span><span class="p">(</span><span class="n">min</span><span class="p">,</span> <span class="n">max</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">max</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">mid</span> <span class="o">=</span> <span class="p">((</span><span class="n">max</span> <span class="o">-</span> <span class="n">min</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">ceil</span> <span class="o">+</span> <span class="n">min</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bsearch3</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">endpoint</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="n">start</span> <span class="o">&lt;=</span> <span class="n">endpoint</span>
</span><span class='line'><span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">endpoint</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">array</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">==</span> <span class="n">num</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">mid</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span>
</span><span class='line'>  <span class="n">endpoint</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">start</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">1000</span>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bsearch Pretty:&quot;</span><span class="p">)</span>    <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">bsearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span>  <span class="mi">9999</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bsearch Recursive:&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">bsearch2</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">9999</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bsearch While Loop:&quot;</span><span class="p">){</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">bsearch3</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">9999</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Using .index:&quot;</span><span class="p">)</span>      <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">index</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span>    <span class="mi">9999</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bsearch Pretty:&quot;</span><span class="p">)</span>    <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">bsearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span>  <span class="mi">500</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bsearch Recursive&quot;</span><span class="p">)</span>  <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">bsearch2</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bsearch While Loop:&quot;</span><span class="p">){</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">bsearch3</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">500</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Using .index:&quot;</span><span class="p">)</span>      <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">index</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span>    <span class="mi">500</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bsearch Pretty:&quot;</span><span class="p">)</span>    <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">bsearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span>  <span class="mi">1000</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bsearch Recursive&quot;</span><span class="p">)</span>  <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">bsearch2</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Bsearch While Loop:&quot;</span><span class="p">){</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">bsearch3</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Using .index:&quot;</span><span class="p">)</span>      <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">index</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span>    <span class="mi">1000</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>I decided to go with a version of the iterative binary search because of the awesome performance</h2>

<p>In the end the code that I fancied most is the code you see below.</p>

<figure class='code'><figcaption><span>The code I went with</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bsearch_get_index</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>    <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">high</span> <span class="o">=</span> <span class="n">length</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">while</span> <span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span>
</span><span class='line'>      <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">low</span> <span class="o">+</span> <span class="n">high</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="nb">self</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">==</span> <span class="n">num</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">mid</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="nb">self</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span>
</span><span class='line'>        <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">10</span><span class="o">].</span><span class="n">bsearch_get_index</span> <span class="mi">10</span> <span class="c1"># =&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spaceship Operator]]></title>
    <link href="http://johnathanweisner.github.io/blog/2014/05/18/spaceship-operator/"/>
    <updated>2014-05-18T22:16:59-04:00</updated>
    <id>http://johnathanweisner.github.io/blog/2014/05/18/spaceship-operator</id>
    <content type="html"><![CDATA[<h2>Week 6 in Review</h2>

<p>Yesterday was the last day of week 6 and I wasn’t overly impressed with the challenge but the week was definitely necessary to hammer home all of the information we already learned.</p>

<p>A huge revelation came this week! I am finally completely comfortable with recursion! This is a huge accomplishment for me because ever since I first tried to learn recursion years ago I couldn’t quite grasp it. The real revelation came with understanding base cases and their importance.</p>

<p>Some fun new methods I picked up over the course of the week.</p>

<h2>Array Methods:</h2>

<h3>[].compact</h3>

<p>This method removes nil objects from an array.
Example of use:</p>

<figure class='code'><figcaption><span>Ruby Compact Method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="kp">nil</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="kp">nil</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="kp">nil</span><span class="o">].</span><span class="n">compact</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>&lt;=></h3>

<p>This method checks to see which array starts with higher objects.
Higher meaning the number is larger or the word/letter comes first alphabetically.
If the first object is the same then the method moves on to check
the next objects.
If the higher ranked array comes first then return +1.
If the higher ranked array comes second return -1.
If the arrays are equal return 0.
If the arrays can not be compared return nil.
<em>Example of use:</em></p>

<figure class='code'><figcaption><span>Ruby Spaceship Operator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">one</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">two</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="n">one</span> <span class="o">&lt;=&gt;</span> <span class="n">two</span> <span class="c1"># =&gt; -1</span>
</span><span class='line'><span class="n">two</span> <span class="o">&lt;=&gt;</span> <span class="n">one</span> <span class="c1"># =&gt; +1</span>
</span><span class='line'><span class="n">one</span> <span class="o">=</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="n">two</span> <span class="o">=</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">9</span><span class="o">]</span>
</span><span class='line'><span class="n">one</span> <span class="o">&lt;=&gt;</span>
</span><span class='line'><span class="n">two</span> <span class="c1"># =&gt; +1</span>
</span><span class='line'><span class="n">two</span> <span class="o">&lt;=&gt;</span> <span class="n">one</span> <span class="c1"># =&gt; -1</span>
</span><span class='line'><span class="n">word1</span> <span class="o">=</span> <span class="sx">%w{a b c d e}</span>
</span><span class='line'><span class="n">word2</span> <span class="o">=</span> <span class="sx">%w{b a a a a}</span>
</span><span class='line'><span class="n">word1</span> <span class="o">&lt;=&gt;</span> <span class="n">word2</span> <span class="c1"># =&gt; +1</span>
</span><span class='line'><span class="n">word2</span> <span class="o">&lt;=&gt;</span> <span class="n">word1</span> <span class="c1"># =&gt; -1</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span> <span class="o">&lt;=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span> <span class="c1"># =&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Up to Date]]></title>
    <link href="http://johnathanweisner.github.io/blog/2014/02/11/getting-up-to-date/"/>
    <updated>2014-02-11T00:00:00-05:00</updated>
    <id>http://johnathanweisner.github.io/blog/2014/02/11/getting-up-to-date</id>
    <content type="html"><![CDATA[<hr />

<p>layout: post
title: &ldquo;Getting Up to Date&rdquo;
date: 2014-05-18 22:08:32 -0400
comments: true
sharing: true
categories: [DBC, Phase 0, Introduction]</p>

<h4>Here is an quick update to my current situation.</h4>

<p>Last year I decided on going to Dev Bootcamp. The application was started on <strong>June 27th 2013</strong> and submitted about a month later. I spent a week planning and making my instructional application video which can be found here. The video is embarrassing in hindsight, but I get truly nervous when I want something intensely.</p>

<p>After I was notified about being picked for an interview on <strong>August 9th 2013</strong> I got an interview date for a Skype call with Tiffany Mikell at the Chicago DBC for <strong>August 28th 2013</strong>. The interview went smoothly and a lot of it seemed like chit-chat but I think my personality was being gauged as well as my technical skill. (DBC gave some prep work to be done before the interview.)
The highlight of the interview was a brain teaser which in and of itself is not important. The important part was the process you used to break down the problem and work through it. Your personal problem solving algorithm if you will. The last bit of the interview was walking through simple ruby code and explaining what each line meant as we went. It was silly easy, but really I think it was to check that you can process code and explain code at all.</p>

<p>Then a nervous three days passed before they sent me a Congratulations E-Mail on my acceptance. (September 1st 2013 Yay!)</p>

<p><strong>October 5th 2013</strong>: the Phase 0 and prep work was sent out.</p>

<p><strong>November 3rd 2013</strong>: I noticed an update on the DBC website announcing the opening of a DBC location in NYC so I quickly sent Tanner Welsh an E-mail  asking how I would be able to switch from the Chicago location to the NYC location. He had me sign up for an interview to get in touch with him. I assumed it would be a similar interview to the first one questioning technical knowledge and what not but it was nearly the opposite.
The interview was backwards. Tanner had me interview him to make sure I really wanted to come to the NYC location. It was pretty awesome and the next day I confirmed everything and got a slot in the <strong>March 31st 2014</strong> Cohort.</p>

<p>After checking off most of the prep work that I needed to do and fast forwarding a bit I get an E-Mail from Tanner letting everyone know that Phase 0 starts on <strong>January 4th</strong> and giving all of the details about the work load we will have an the coding we will be doing.</p>

<h4>FIDDLER CRABS - The name of our NYC Cohort.</h4>

<p>I was super eager, but saw the email while a work. That night I hopped on my computer and dived in head-first completing assignments and then checking the solutions of other students after I finished to reinforce the information as well as pick up new tricks.</p>

<p>Fast forward four weeks and my job let me know that I will be laid off. This was a mixed blessing because I was going to be leaving for school in a couple months, but it hurt that I wouldn’t be able to see my co-workers as frequently. They’re good people.</p>

<p>Present day <strong>February 11th 2014</strong>: It has almost been a year since I first decided to go to DBC. Throughout that time I have realized this has been the best work life decision I have ever made.</p>

<p>I have learned an insane amount about coding in the past 5 weeks and the real work hasn’t even started yet!</p>

<p>Each day I update here I will also add a work of art I have made.</p>
]]></content>
  </entry>
  
</feed>
